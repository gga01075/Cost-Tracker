{"version":3,"sources":["components/Expenses/ExpenseDate.js","components/UI/Card.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Expenses/ExpensesFilter.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpenseDate","props","Year","date","getFullYear","month","toLocaleString","day","className","Card","classes","children","ExpenseItem","title","amount","ExpensesList","items","length","map","expense","id","ExpensesFilter","value","selected","onChange","event","onSelectYear","target","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","console","log","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a54dc7b9.chunk.js","sourcesContent":["import \"./ExpenseDate.css\";\r\n\r\n\r\nconst ExpenseDate = (props) =>  {\r\n  const Year = props.date.getFullYear();\r\n  const month = props.date.toLocaleString(\"ko\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"ko\", { day: \"2-digit\" });\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{Year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import \"./Card.css\"\r\n\r\nconst Card = (props) =>  {\r\n    const classes = 'card ' + props.className;\r\n    return <div className={classes}>{props.children}</div>\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n/* \r\n이 Card컴포넌트는 일종의 래퍼 역할을 한다.\r\n이 Card컴포넌트 사이에 다른 컴포넌트가 들어가 있으면 그 자식 컴포넌트는 props를 받아들이지 못하는데\r\n전달된 props의 children이라는 예약어를 사용하면 \r\nCard에 prop을 따로 전달하지 않아도 자식에게 전달할 수 있다.\r\n*/\r\n","\r\n\r\nimport \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\nconst ExpenseItem = (props) =>  {\r\n\r\n\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date}/>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n\r\n/* \r\n리액트는 JSX코드를 평가할 떄마다 컴포넌트함수를 평가하고 호출한다. \r\n하지만 우리는 값을 변경할 때 리액트에게 어떤 것이 변경되었고 어떤 컴포넌트가 재평가되어야한다고\r\n말하는 방법이 필요하다. 그래서 리액트는 state라는 특별한 개념을 도입한다. \r\nstate를 set시키면 해당 컴포넌트 함수는 재평가된다.  \r\n\r\n\r\n\r\n*/","import \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\n\r\nconst ExpensesList = (props) => {\r\n\r\n\r\n  if(props.items.length === 0 ) {\r\n     return <h2 className=\"expenses-list__fallback\">No found expenses.</h2>;\r\n  }\r\n\r\n  return (\r\n        <ul className=\"expenses-list\">\r\n            {props.items.map((expense) => (\r\n            <ExpenseItem\r\n                key={expense.id}\r\n                date={expense.date}\r\n                title={expense.title}\r\n                amount={expense.amount}\r\n            />\r\n            ))};\r\n        </ul>\r\n   );\r\n\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from 'react';\r\n\r\nimport './ExpensesFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n\r\n  const dropdownChangeHandler = (event) => {\r\n      props.onSelectYear(event.target.value);\r\n  } \r\n\r\n  return (\r\n    <div className='expenses-filter'>\r\n      <div className='expenses-filter__control'>\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value='2022'>2022</option>\r\n          <option value='2021'>2021</option>\r\n          <option value='2020'>2020</option>\r\n          <option value='2019'>2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;","import React, { useState } from \"react\";\r\n\r\nimport \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  \r\n  // 차트에 채워질 값을 1~100으로 나타내기\r\n  let barFillHeight = '0%';\r\n  if(props.maxValue> 0 ) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n        <div className=\"chart-bar__label\">{props.label}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import React, { useState } from \"react\";\r\n\r\nimport ChartBar from \"./ChartBar\";\r\nimport \"./Chart.css\";\r\n\r\nconst Chart = (props) => {\r\n   \r\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value)\r\n\r\n  // maxValue : 모든 달을 살펴보고 전체 달 중에서 가장 큰값을 찾아야한다. \r\n  const totalMaximum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        /* \r\n        ChartBar의 속성\r\n        1. key : 렌더링을 위해서 key 추가\r\n        2. value : 차트값\r\n        3. maxValue : 모든 차트의 바는 전체 차트의 최대값을 기준으로 값을 표시한다.\r\n        그래서 속성으로 maxValue도 전달합니다. \r\n        4. label : 1월,2월,3월... \r\n        */\r\n        <ChartBar\r\n          key={dataPoint.id}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n\r\n// import \"./ChartBar.css\";\r\nimport Chart from \"../Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n\r\n   const chartDataPoints = [\r\n     {label : 'Jan', value : 0},\r\n     {label : 'Feb', value : 0},\r\n     {label : 'Mar', value : 0},\r\n     {label : 'Apr', value : 0},\r\n     {label : 'May', value : 0},\r\n     {label : 'Jun', value : 0},\r\n     {label : 'Jul', value : 0},\r\n     {label : 'Aug', value : 0},\r\n     {label : 'Sep', value : 0},\r\n     {label : 'Oct', value : 0},\r\n     {label : 'Nov', value : 0},\r\n     {label : 'Dec', value : 0},\r\n   ];\r\n   \r\n   /* \r\n   for반복문을 추가해서 props에서 얻는 모든 비용을 살펴보고 해당 비용의 달을 가져와서 비용 금액에 따라 적절한 dataPoints의 값을 업데이트합니다. \r\n   */\r\n   for(const expense of props.expenses) {\r\n     // 0~11\r\n     const expenseMonth = expense.date.getMonth();\r\n     chartDataPoints[expenseMonth].value += expense.amount;\r\n   }\r\n\r\n   return (\r\n     <Chart dataPoints={chartDataPoints} />\r\n   )\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./Expenses.css\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport Card from \"../UI/Card\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n \r\n  return (\r\n    <li>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onSelectYear={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./NewExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    // form이 서버에 제출되는 기본적인 기능 막음\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    // console.log(expenseData);\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            value={enteredAmount}\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            value={enteredDate}\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  // 추가\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n   const stopEditingHandler = () => {\r\n      setIsEditing(false);\r\n    };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onCancel={stopEditingHandler}\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import React, { useState } from 'react';\r\n\r\nimport Expenses from './components/Expenses/Expenses';\r\nimport NewExpense from './components/NewExpense/NewExpense';\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: 'e1',\r\n    title: 'Toilet Paper',\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  { id: 'e2', title: 'New TV', amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: 'e3',\r\n    title: 'Car Insurance',\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: 'e4',\r\n    title: 'New Desk (Wooden)',\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES)\r\n\r\n  \r\n    \r\n  const addExpenseHandler = (expense) => {\r\n    console.log('In App js');\r\n    console.log('expense', expense);\r\n    setExpenses(prevExpenses => {\r\n      return [expense, ...prevExpenses]\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense = {addExpenseHandler} />\r\n      <Expenses items={expenses}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom/client';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n\r\n/* \r\n\r\n이렇게 localhost:3000에 접속할 때마다 최초로 실행될 코드가 index.js 파일에 있죠\r\n\r\n이렇게 말해야겠어요 사실 이 코드가 실행되는 게 아니라 변환된 버전의 코드가 실행되는 겁니다\r\n\r\n프로젝트 설정에 코드를 변환하고 최적화하는 스크립트가 포함되었다면 그 과정은 백그라운드에서 처리되죠\r\n\r\nnpm start 프로세스가 진행되면 코드를 확인하기 시작하죠\r\n\r\n이 프로세스는 코드를 확인해서 브라우저로 코드를 가져가서 전달하기만 하는 게 아니라 전달하기 전에 코드를 변환할 거예요\r\n\r\n브라우저 안에서 특정 작업이 추가로 처리되는 거죠\r\n\r\n*/"],"sourceRoot":""}